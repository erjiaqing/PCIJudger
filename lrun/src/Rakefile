require 'rake/clean'

SRC          = FileList['*.cc', 'options/*.cc', 'utils/*.cc']
OBJ          = SRC.ext('o')
BIN          = 'lrun'
CXX          = ENV['CXX'] || 'g++'
CXXFLAGS     = ENV['CXXFLAGS'] || '-Wall -Wextra -Wunused-result -pipe'
LD           = CXX
LDFLAGS      = ENV['LDFLAGS'] || '-Wl,-O1,--sort-common,--as-needed,-z,relro'
PREFIX       = ENV['PREFIX'] || (ENV['DESTDIR'] ? '/usr' : '/usr/local')
INSTALL      = ENV['INSTALL'] || 'install'
SUDO         = ENV['SUDO'] || 'sudo'
LRUN_GROUP   = ENV['LRUN_GROUP'] || 'lrun'
LRUN_GID     = ENV['LRUN_GID'] || '593'
TMP_DIR      = ENV['TMP'] || ENV['TEMP'] || '/tmp'
NULL         = ENV['NULL'] || '/dev/null'
NODEBUG_FLAG = ENV['NDEBUG'] ? '-DNDEBUG' : '-g'
NOLIBSF_FLAG = ENV['NOLIBSEGFAULT'] ? '-DNLIBSEGFAULT' : ''
GROUPADD     = ENV['GROUPADD'] || 'groupadd'
NOSECCOMP    = ENV['NOSECCOMP']
NOSUDO       = ENV['NOSUDO']

FALLBACK_VER = 'v1.1.4'

CLEAN.include('*.o', 'options/*.o', 'utils/*.o')
CLOBBER.include(BIN)


# Ruby 1.8 missing features
# -------------------------

unless File.respond_to?(:write)
  def File.write(filename, content)
    File.open(filename, 'w') {|f| f.write(content)}
  end
end

# Hack Debian PATH
ENV['PATH'] = ENV['PATH'] + ':/sbin:/usr/sbin'

# Helper methods
# --------------
def which(name, paths)
  paths.split(':').each do |dir|
    path = File.join(dir, name)
    return path if File.exist?(path)
  end
  nil
end

def executable_exists?(name)
  # only interested in first word in name
  name = name.split.first
  path = which(name, ENV['PATH'] + ':/')
  path && File.executable?(path) ? true : false
end

def require_executable!(name)
  raise "required '#{name}' not found" unless executable_exists? name
end

def pkgconfig(params)
  if executable_exists?('pkg-config')
    @pkgconfig_results ||= {}
    @pkgconfig_results[params.to_s] ||= `pkg-config --silence-errors #{params}`.chomp
  else
    nil
  end
end

def try_cxxflags(flags, start_with_check = nil)
  # check existing flags, if some is start_with `start_with_check`, then
  # just use it
  @existing_flags ||= CXXFLAGS.split
  start_with_check ||= flags.first.gsub(/=.*$/, '')
  return '' if @existing_flags.any? {|f| f.start_with?(start_with_check)}

  # try g++ flags one by one.
  @cflags ||= {}
  blank_cpp_path = File.join((Dir.tmpdir rescue TMP_DIR), ".blank.cpp")
  unless File.exist? blank_cpp_path
    File.write(blank_cpp_path, 'int main() { return 0; }')
  end

  @cflags[flags.to_s] ||= (flags.find do |flag|
    system "#{CXX} #{flag} #{blank_cpp_path} -E 1>#{NULL} 2>#{NULL}"
  end || '')
ensure
  File.unlink blank_cpp_path rescue nil
end

def get_version
  @version ||= \
    begin
      git_version = if File.exist?('../.git')
                      (`git describe --abbrev=4 --tags --always --dirty` rescue '').chomp
                    else
                      ''
                    end
      git_version.empty? ? "#{FALLBACK_VER}-b#{Time.now.strftime('%Y%m%d')}" : git_version
    end
end

def get_libseccomp_version
  @libseccomp_version ||=\
    begin
      if NOSECCOMP
        0
      elsif executable_exists?('pkg-config')
        pkgconfig('--modversion libseccomp').to_i
      elsif File.exist?('/usr/include/seccomp.h')
        [2].find do |ver|
          which("libseccomp.so.#{ver}", '/usr/lib:/usr/local/lib:/usr/lib/x86_64-linux-gnu')
        end || 0
      else
        0
      end
    end
end

def get_libseccomp_libs
  case get_libseccomp_version
  when 0
    ''
  else
    pkgconfig('--libs libseccomp') || '-lseccomp'
  end
end

def get_other_libs
  (ENV['NDEBUG'] || ENV['NOLIBSEGFAULT']) ? '' : '-ldl'
end

def get_libseccomp_cflags
  case get_libseccomp_version
  when 0
    ''
  else
    if executable_exists?('pkg-config')
      pkgconfig('--cflags libseccomp')
    else
      ''
    end
  end
end

def root_sh(command)
  if Process.uid == 0 || NOSUDO
    sh command
  else
    require_executable! SUDO
    sh "#{SUDO} #{command}"
  end
end


# Rake tasks
# ----------

task :default => [BIN]

rule '.o' => '.cc' do |t|
  flags = [try_cxxflags(['-std=c++11', '-std=c++0x'], '-std='),
           try_cxxflags(['-fstack-protector-strong', '-fstack-protector'], '-fstack'),
           try_cxxflags(['--param=ssp-buffer-size=4'], '--param=ssp-buffer-size'),
           try_cxxflags(['-D_FORTIFY_SOURCE=2'], '-D_FORTIFY_SOURCE'),
           try_cxxflags(['-Os'], '-O'),
           CXXFLAGS, NODEBUG_FLAG, NOLIBSF_FLAG,
           "-DLIBSECCOMP_VERSION_MAJOR=#{get_libseccomp_version}",
           "-DVERSION=\\\"#{get_version}\\\"",
           get_libseccomp_cflags].join(' ')
  require_executable! CXX
  sh "#{CXX} #{flags} -c -o #{t.name} #{t.source}"
end

file BIN => OBJ do |t|
  require_executable! LD
  sh "#{LD} #{LDFLAGS} -o #{t.name} #{t.prerequisites * ' '} #{get_libseccomp_libs} #{get_other_libs}"
end

task :lrun_group do |t|
  # check group
  next if File.read('/etc/group').lines.any? { |line| /^#{LRUN_GROUP}:/ =~ line }
  # add lrun group
  require_executable! GROUPADD
  sh "#{GROUPADD} -r #{LRUN_GID ? "-g #{LRUN_GID}" : ''} #{LRUN_GROUP}"
end

task :install => [BIN, :lrun_group] do |t|
  require_executable! INSTALL
  install_flags = "-D -m4550 -oroot -g#{LRUN_GROUP}"
  install_flags << ' -s' if ENV['NDEBUG']
  sh "#{INSTALL} #{install_flags} #{BIN} #{ENV['DESTDIR']}#{PREFIX}/bin/lrun"
end
